#!/bin/bash

out_dir=test_out/
rm -rf $out_dir
mkdir -p $out_dir

source bin/stack_functions

export CONTROLLER_NAME=127.0.0.1

TEST_RESULTS=${TEST_RESULTS:-$out_dir/test_stack.out}
GOLDEN_RESULTS=etc/test_stack.out
TCPSUDO="sudo tcpdump"
controllers=`sudo ovs-vsctl get-controller t1sw1`

local=
if [ "$1" == local ]; then
    local=y
    shift
fi

bridges=$(sudo ovs-vsctl show | fgrep Bridge | wc -l)
if [ $bridges != 6 ]; then
    echo System misconfiguration: found $bridges bridges, expected 6.
    exit 2
fi

containers=$(docker ps  | fgrep forch- | wc -l)
if [ $containers != 7 ]; then
    echo System misconfiguration: found $containers containers, expected 7.
    exit 2
fi

cap_base=10
ping_count=10
num_pairs=12
cap_length=$((cap_base + ping_count + num_pairs * 2))

faucet_log=inst/forch-faucet-1/faucet.log
forch_log=inst/forch-faucet-1/forch.log

function diagnose_stack {
    echo Stack health
    for bridge in $(sudo ovs-vsctl list-br); do
        cont_count=`sudo ovs-vsctl get-controller $bridge | wc -l`
        if [ $cont_count != 2 ]; then
            echo Switch $bridge config: $(sudo ovs-vsctl get-controller $bridge)
        fi
    done

    ip link | fgrep M-DOWN | sed -E 's/.*:(.*):.*/\1/'
}

function reset_stack {
    sudo ovs-vsctl set-controller t2sw3 $controllers
    sudo ip addr del 240.0.0.253/24 dev lo
    sudo ip addr del 240.0.0.1/24 dev lo
    sudo ip addr del 240.0.0.2/24 dev lo
    sudo ip link set t1sw1-eth6 up
    sudo ip link set t1sw1-eth9 up
    sudo ip link set t1sw1-eth10 up
    sudo ip link set t1sw1-eth11 up
    sudo ip link set t1sw2-eth10 up

    diagnose_stack
}

function test_pair {
    src=$1
    dst=$2

    host=forch-faux-$src
    out_file=$nodes_dir/$host-$dst
    cmd="ping -c $ping_count 192.168.1.$dst"
    echo $host: $cmd
    echo -n $host: $cmd\ > $out_file
    docker exec $host $cmd | fgrep time= | wc -l >> $out_file 2>/dev/null &
}

# Compare two numbers and output { -1, 0, 1 }
function comp {
    echo $((($1 - $2 > 0) - ($1 - $2 < 0)))
}

function test_stack {
    desc=stack$1
    echo Starting $desc test... | tee -a $TEST_RESULTS

    diagnose_stack

    # Some versions of OVS are somewhat unstable, so restart for consistency.
    echo $desc Restarting ovs...
    sudo /etc/init.d/openvswitch-switch restart

    echo $desc Waiting for network stability...
    sleep 30

    desc_dir=$out_dir/$desc
    t1sw1p6_pcap=$desc_dir/t1sw1-eth6.pcap
    t1sw1p28_pcap=$desc_dir/t1sw1-eth28.pcap
    t1sw2p28_pcap=$desc_dir/t1sw2-eth28.pcap
    t2sw1p1_pcap=$desc_dir/t2sw1-eth1.pcap
    t2sw1p50_pcap=$desc_dir/t2sw1-eth50.pcap
    t2sw1p52_pcap=$desc_dir/t2sw1-eth52.pcap
    t2sw2p1_pcap=$desc_dir/t2sw2-eth1.pcap
    nodes_dir=$desc_dir/nodes

    rm -rf $nodes_dir
    mkdir -p $nodes_dir

    echo $desc Capturing pcaps for $cap_length seconds...
    timeout $cap_length $TCPSUDO -eni t1sw1-eth6 -w $t1sw1p6_pcap &
    timeout $cap_length $TCPSUDO -Q out -eni t1sw1-eth28 -w $t1sw1p28_pcap &
    timeout $cap_length $TCPSUDO -Q out -eni t1sw2-eth28 -w $t1sw2p28_pcap &
    timeout $cap_length $TCPSUDO -Q out -eni faux-1 -w $t2sw1p1_pcap &
    timeout $cap_length $TCPSUDO -eni t2sw1-eth50 -w $t2sw1p50_pcap &
    timeout $cap_length $TCPSUDO -eni t2sw1-eth52 -w $t2sw1p52_pcap &
    timeout $cap_length $TCPSUDO -Q out -eni faux-2 -w $t2sw2p1_pcap &
    sleep 5

    echo $desc Simple tests...
    for from in 0 1 2 3; do
        for to in 0 1 2 3; do
            if [ $from != $to ]; then
                docker exec forch-faux-$from sh -c "arp -d 192.168.1.$to; ping -c 1 192.168.1.$to"
            fi
        done
    done

    echo $desc Pair tests...
    for from in 0 1 2 3; do
        for to in 0 1 2 3; do
            if [ $from != $to ]; then
                test_pair $from $to
            fi
        done
    done

    echo $desc Starting TCP probes...
    docker exec forch-faux-0 nc -w 1 192.168.1.1 23 2>&1 | tee -a $TEST_RESULTS
    docker exec forch-faux-0 nc -w 1 192.168.1.1 443 2>&1 | tee -a $TEST_RESULTS

    echo $desc Waiting for port capture to complete...
    sleep $cap_length
    sudo chown -R $USER $desc_dir

    bcount6=$(tcpdump -en -r $t1sw1p6_pcap | wc -l) 2>/dev/null
    bcount50=$(tcpdump -en -r $t2sw1p50_pcap | wc -l) 2>/dev/null
    bcount52=$(tcpdump -en -r $t2sw1p52_pcap | wc -l) 2>/dev/null
    bcount_total=$((bcount50 + bcount52))
    echo $desc pcap count is $bcount6 $bcount50 $bcount52 $bcount_total
    echo pcap sane $((bcount6 < 100)) \
         $((bcount_total > 100)) $((bcount_total < 220)) | tee -a $TEST_RESULTS

    bcount1e=$(tcpdump -en -r $t1sw1p28_pcap ether broadcast| wc -l) 2>/dev/null
    bcount2e=$(tcpdump -en -r $t1sw2p28_pcap ether broadcast| wc -l) 2>/dev/null
    bcount1h=$(tcpdump -en -r $t2sw1p1_pcap ether broadcast | wc -l) 2>/dev/null
    bcount2h=$(tcpdump -en -r $t2sw2p1_pcap ether broadcast | wc -l) 2>/dev/null
    echo pcap bcast $(comp $bcount1e 4) $(comp $bcount2e 0) \
         $(comp $bcount1h 4) $(comp $bcount2h 4) | tee -a $TEST_RESULTS

    telnet50=$(tcpdump -en -r $t2sw1p50_pcap vlan and port 23 | wc -l) 2>/dev/null
    https50=$(tcpdump -en -r $t2sw1p50_pcap vlan and port 443 | wc -l) 2>/dev/null
    telnet52=$(tcpdump -en -r $t2sw1p52_pcap vlan and port 23 | wc -l) 2>/dev/null
    https52=$(tcpdump -en -r $t2sw1p52_pcap vlan and port 443 | wc -l) 2>/dev/null
    echo telnet $((telnet50 + telnet52)) https $((https50 + https52)) | tee -a $TEST_RESULTS

    cat $nodes_dir/* | tee -a $TEST_RESULTS

    echo Done with $desc test. | tee -a $TEST_RESULTS
}

function restart_forch {
    echo Killing any old instances of forch...
    kill `ps ax | fgrep forchestrator | fgrep -v fgrep | awk '{print $1}'`
    kill `ps ax | fgrep $forch_log | fgrep -v fgrep | awk '{print $1}'`

    rm -f $forch_log
    tail --retry -f $forch_log &

    bin/forch inst/forch-faucet-1 2>&1 &

    # Wait for system to warm-up, including background process/cpn checks.
    sleep 20
}

function fetch_forch {
    name=$1
    args=$2
    sub=$3

    api=$name$args
    fname=$fout_dir/$name$sub.json

    curl http://$CONTROLLER_NAME:9019/$api > $fname
    echo http://$CONTROLLER_NAME:9019/$api > $fname.txt
    jq . $fname >> $fname.txt
    echo forch $name$sub results from $api
    cat $fname
    echo
}

function test_forch {
    fout_dir=$out_dir/forch$1
    mkdir -p $fout_dir

    # Make sure mac addresses are still learned...
    docker exec forch-faux-1 ping -q -c 3 192.168.1.2

    echo Running forch$1 tests | tee -a $TEST_RESULTS
    echo Current time: $(date)

    fetch_forch system_state
    fetch_forch dataplane_state
    fetch_forch switch_state '?switch=nz-kiwi-t2sw1&port=1' 1
    fetch_forch switch_state '?switch=nz-kiwi-t1sw2&port=10' 2
    fetch_forch switch_state '?switch=nz-kiwi-t2sw3&port=1' 3
    fetch_forch cpn_state
    fetch_forch process_state
    fetch_forch list_hosts '' 1
    fetch_forch list_hosts ?eth_src=9a:02:57:1e:8f:01 2
    fetch_forch host_path '?eth_src=9a:02:57:1e:8f:01&eth_dst=9a:02:57:1e:8f:02' 1
    fetch_forch host_path '?eth_src=9a:02:57:1e:8f:01&to_egress=true' 2

    echo @system_state | tee -a $TEST_RESULTS
    api_result=$fout_dir/system_state.json
    jq .site_name $api_result | tee -a $TEST_RESULTS
    jq .system_state_change_count $api_result | tee -a $TEST_RESULTS
    jq .peer_controller_url $api_result | tee -a $TEST_RESULTS
    jq .system_state $api_result | tee -a $TEST_RESULTS

    echo @dataplane_state | tee -a $TEST_RESULTS
    api_result=$fout_dir/dataplane_state.json
    jq '.dataplane_state' $api_result | tee -a $TEST_RESULTS
    jq '.dataplane_state_detail' $api_result | tee -a $TEST_RESULTS
    jq '.dataplane_state_change_count' $api_result | tee -a $TEST_RESULTS
    jq '.switch.switches."nz-kiwi-t1sw2".switch_state' $api_result | tee -a $TEST_RESULTS
    jq '.stack.links."nz-kiwi-t1sw1:6@nz-kiwi-t1sw2:6".link_state' $api_result | tee -a $TEST_RESULTS
    jq '.egress.egress_state' $api_result | tee -a $TEST_RESULT
    jq '.egress.egress_state_detail' $api_result | tee -a $TEST_RESULT
    jq '.egress.egress_state_change_count' $api_result | tee -a $TEST_RESULT
    jq '.egress.active_root' $api_result | tee -a $TEST_RESULT

    echo @switch_state | tee -a $TEST_RESULTS
    api_result=$fout_dir/switch_state1.json
    jq '.switches_state_change_count' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".root_path[1].switch' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".root_path[1].in' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".root_path[1].out' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".attributes.dp_id' $api_result | tee -a $TEST_RESULTS
    api_result=$fout_dir/switch_state2.json
    jq '.switches_state_detail' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t1sw2".switch_state' $api_result | tee -a $TEST_RESULTS
    api_result=$fout_dir/switch_state3.json
    jq '.switches."nz-kiwi-t2sw3".switch_state_change_count' $api_result | tee -a $TEST_RESULTS

    echo @cpn_state | tee -a $TEST_RESULTS
    api_result=$fout_dir/cpn_state.json
    jq '.cpn_state_change_count' $api_result | tee -a $TEST_RESULTS
    for node in nz-kiwi-t1sw1 nz-kiwi-t2sw2; do
        jq ".cpn_nodes.\"$node\".attributes.cpn_ip" $api_result | tee -a $TEST_RESULTS
        jq ".cpn_nodes.\"$node\".state" $api_result | tee -a $TEST_RESULTS
    done

    echo @process_state | tee -a $TEST_RESULTS
    api_result=$fout_dir/process_state.json
    jq .processes_state_change_count $api_result | tee -a $TEST_RESULTS
    jq .processes.faucet.state $api_result | tee -a $TEST_RESULTS
    jq .processes.sleep.state $api_result | tee -a $TEST_RESULTS
    jq .processes.sleep.cmd_line $api_result | tee -a $TEST_RESULTS
    jq '.processes.sleep.cpu_times_s | length' $api_result | tee -a $TEST_RESULTS

    echo @list_hosts | tee -a $TEST_RESULTS
    api_result=$fout_dir/list_hosts1.json
    jq '.eth_srcs."9a:02:57:1e:8f:01".url' $api_result | tee -a $TEST_RESULTS
    api_result=$fout_dir/list_hosts2.json
    jq '.eth_dsts."9a:02:57:1e:8f:02".url' $api_result | tee -a $TEST_RESULTS

    echo @host_path | tee -a $TEST_RESULTS
    api_result=$fout_dir/host_path1.json
    jq .dst_ip $api_result | tee -a $TEST_RESULTS
    jq .path[1].switch $api_result | tee -a $TEST_RESULTS
    jq .path[1].out $api_result | tee -a $TEST_RESULTS
    api_result=$fout_dir/host_path2.json
    jq .src_ip $api_result | tee -a $TEST_RESULTS
    jq .path[1].switch $api_result | tee -a $TEST_RESULTS
    jq .path[1].egress $api_result | tee -a $TEST_RESULTS
    jq '.path | length' $api_result | tee -a $TEST_RESULTS
}

echo Capturing $faucet_log...
rm -f $faucet_log
tail --retry -f $faucet_log &

reset_stack

if [ -n "$local" ]; then
    echo Restarting Faucet | tee -a $TEST_RESULTS
    docker restart forch-faucet-1
    docker exec forch-faux-1 ping -c 3 192.168.1.2
fi

restart_forch

# Test that the 'local' mode of faucet is working properly.
echo 'print("supercalifragilisticexpialidocious")' > faucet/faucet/python_test.py
docker exec forch-faucet-1 python -m faucet.python_test 2>&1 | tee -a $TEST_RESULTS
rm faucet/faucet/python_test.py

echo %%% initial solid state | tee -a $TEST_RESULTS
test_stack -solid
test_forch -solid

echo %%% healthy state | tee -a $TEST_RESULTS
sudo ip addr add 240.0.0.1/24 dev lo
sudo ip addr add 240.0.0.2/24 dev lo
sudo ip addr add 240.0.0.253/24 dev lo
sleep 50.3231 &
sleep 32
test_forch -healthy

reset_stack
sleep 32

echo %%% t2sw3 down, cpn nz-kiwi-ctl1 up, t1sw1-eth9 down | tee -a $TEST_RESULTS
sudo ovs-vsctl del-controller t2sw3
sudo ip addr add 240.0.0.253/24 dev lo
sudo ip link set t1sw1-eth9 down
test_stack -linkd

echo %%% t1sw1-eth10 down | tee -a $TEST_RESULTS
sudo ip link set t1sw2-eth10 down
test_stack -twod
sleep 50.3231 &
sleep 32
test_forch -twod

echo %%% t2sw3 up, cpn nz-kiwi-t2sw2 up, t1sw1-eth6 down, t1sw1-eth11 down | tee -a $TEST_RESULTS
sudo ovs-vsctl set-controller t2sw3 $controllers
sudo ip addr add 240.0.0.1/24 dev lo
sudo ip link set t1sw1-eth6 down
sudo ip link set t1sw1-eth11 down
test_stack -broken
test_forch -broken

echo %%% cpn t2sw2 down, t1sw1:10 down, t1sw2:10 up, t1sw1:6 up, t2sw3 swapped | tee -a $TEST_RESULTS
sudo ip addr add 240.0.0.2/24 dev lo
sudo ip link set t1sw1-eth10 down
sudo ip link set t1sw2-eth10 up
sudo ip link set t1sw1-eth6 up
del_link t1sw1 11 t2sw3 50
del_link t1sw2 11 t2sw3 52
add_link t1sw1 11 t2sw3 52
add_link t1sw2 11 t2sw3 50
test_stack -restored
test_forch -restored

echo %%% reset stack | tee -a $TEST_RESULTS
reset_stack
sleep 32
test_forch -reset

echo Killing forch...
sudo kill `ps ax | fgrep forch | awk '{print $1}'`
kill `ps ax | $faucet_log | fgrep -v fgrep | awk '{print $1}'`
kill `ps ax | $forch_log | fgrep -v fgrep | awk '{print $1}'`

echo
echo '########## Begin complete test results ##########'
cat $TEST_RESULTS
echo '########## End complete test_results ##########'
echo
echo Comparing $GOLDEN_RESULTS with $TEST_RESULTS
diff -b $GOLDEN_RESULTS $TEST_RESULTS
result=$?

echo Result diff returned $result
exit $result
